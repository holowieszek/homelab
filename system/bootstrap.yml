- name: Bootstrapping the cluster
  hosts: localhost
  tasks:
    - name: Create ArgoCD namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: argocd
        state: present

    - name: Create External Secrets namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: external-secrets
        state: present

    - name: Populate AWS secrets
      template:
        src: files/templates/secrets-manager-secret.yaml.j2
        dest: files/secrets-manager-secret.yaml
      vars:
        access_key: "{{ lookup('env', 'HOMELAB_ESO_ACCESS_KEY') }}"
        secret_access_key: "{{ lookup('env', 'HOMELAB_ESO_SECRET_ACCESS_KEY') }}"

    - name: Create AWS secrets
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          data:
            access-key: "{{ (lookup('file', 'files/secrets-manager-secret.yaml')|from_yaml).access_key | b64encode }}"
            secret-access-key: "{{ (lookup('file', 'files/secrets-manager-secret.yaml')|from_yaml).secret_access_key | b64encode }}"
          kind: Secret
          metadata:
            name: awssm-secret
            namespace: external-secrets
          type: Opaque

    - name: Create ExternalSecrets manifests
      kubernetes.core.helm_template:
        chart_ref: ./external-secrets
        include_crds: true
        release_name: external-secrets
        release_namespace: external-secrets
        dependency_update: true
        values_files:
          - "external-secrets/values.yaml"
      register: external_secrets_manifests

    - name: Apply ExternalSecrets manifests
      kubernetes.core.k8s:
        resource_definition: "{{ external_secrets_manifests.stdout }}"
        apply: true

    # TBC
    - name: Wait for ExternalSecrets webhook
      ansible.builtin.pause:
        seconds: 180

    - name: Create ArgoCD manifests
      kubernetes.core.helm_template:
        chart_ref: ./argocd
        include_crds: true
        release_name: argocd
        release_namespace: argocd
        dependency_update: true
        values_files:
          - "argocd/values.yaml"
      register: argocd_manifests

    - name: Apply ArgoCD manifests
      kubernetes.core.k8s:
        resource_definition: "{{ argocd_manifests.stdout }}"
        apply: true
        # state: absent
        # delete_all: true
        server_side_apply:
          field_manager: argocd-controller
